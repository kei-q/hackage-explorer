// Generated by CoffeeScript 1.6.2
(function() {
  var index_page_view, packageRactive, tag_page_view, tagsRactive;

  tagsRactive = function(data) {
    var tags;

    return tags = new Ractive({
      el: '#tags',
      template: '#tags_template',
      data: {
        items: data
      }
    });
  };

  packageRactive = function(data) {
    var packages;

    packages = new Ractive({
      el: '#packages',
      template: '#packages_template',
      data: {
        items: data
      }
    });
    return packages.on({
      new_tag: function(event) {
        var pid, tag,
          _this = this;

        pid = event.context["package"].key;
        tag = $(event.node).val();
        return $.post("/packages/tags/new", JSON.stringify([pid, tag]), function(id) {
          if (id) {
            event.context.tags.push({
              id: id,
              name: tag,
              lock: false
            });
            return event.node.value = '';
          }
        });
      },
      delete_tag: function(event, index) {
        var pkg, ptid,
          _this = this;

        ptid = event.context.id;
        pkg = packages.data.items[event.index.i];
        return $.post("/packages/tags/delete", JSON.stringify([ptid]), function(resp) {
          if (resp === true) {
            return pkg.tags.splice(index, 1);
          }
        });
      }
    });
  };

  index_page_view = function(data) {
    return packageRactive(data);
  };

  tag_page_view = function(data) {
    var packages, tag;

    tag = new Ractive({
      el: '#tag_info',
      template: '#tag_template',
      data: data[0]
    });
    tag.on({
      edit: function(event) {
        return this.set('editing', true);
      },
      submit: function(event) {
        var id, synopsis,
          _this = this;

        id = event.context.key;
        synopsis = event.node.value;
        return $.post("/tag/synopsis", JSON.stringify([id, synopsis]), function(resp) {
          if (resp === true) {
            _this.set('value.synopsis', synopsis);
            return _this.set('editing', false);
          }
        });
      }
    });
    return packages = packageRactive(data[1]);
  };

  $(function() {
    var packages, tags;

    if ($('#page_index').size() === 1) {
      return index_page_view(data);
    } else if ($('#page_tag').size() === 1) {
      return tag_page_view(data);
    } else if ($('#page_search_tag').size() === 1) {
      return tags = tagsRactive(data);
    } else if ($('#page_search_package').size() === 1) {
      return packages = packageRactive(data);
    }
  });

}).call(this);
